{"version":3,"file":"static/js/546.e44dad01.chunk.js","mappings":"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","sources":["components/layouts/PropertyCard.jsx","components/pages/properties.jsx"],"sourcesContent":["// src/components/layouts/PropertyCard.jsx\r\nimport React from 'react';\r\nimport '../styles/PropertyCard.css';\r\n\r\nconst PropertyCard = React.forwardRef(({ property }, ref) => {\r\n  return (\r\n    <div className=\"property-card\" ref={ref}>\r\n      <div className=\"property-image\">\r\n        <img src={property.image} alt={property.title} />\r\n        <div className=\"property-badge\">{property.type}</div>\r\n      </div>\r\n      <div className=\"property-details\">\r\n        <h3>{property.title}</h3>\r\n        <p className=\"property-location\">{property.location}</p>\r\n        <p className=\"property-price\">{property.price}</p>\r\n        <div className=\"property-features\">\r\n          <span>{property.beds} Beds</span>\r\n          <span>{property.baths} Baths</span>\r\n          <span>{property.sqft} sqft</span>\r\n        </div>\r\n        <button className=\"property-btn\">View Details</button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default PropertyCard;","import React, { useRef, useEffect, useState } from 'react';\r\nimport PropertyCard from '../layouts/PropertyCard';\r\nimport '../styles/Properties.css';\r\n\r\nconst Properties = () => {\r\n  const sectionRefs = useRef([]);\r\n  const [currentSlide, setCurrentSlide] = useState(0);\r\n  const slidesToShow = 1; // Number of slides to show at once\r\n\r\n  // Sample property data\r\n  const availableProperties = [\r\n    {\r\n      id: 1,\r\n      title: \"Luxury Penthouse\",\r\n      location: \"New York, NY\",\r\n      price: \"$2,500,000\",\r\n      beds: 4,\r\n      baths: 3,\r\n      sqft: 3200,\r\n      type: \"luxury\",\r\n      status: \"Available\",\r\n      image: \"https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80\"\r\n    },\r\n    // ... rest of your availableProperties data\r\n  ];\r\n\r\n  const upcomingProperties = [\r\n    {\r\n      id: 4,\r\n      title: \"Mountain Retreat\",\r\n      location: \"Aspen, CO\",\r\n      price: \"$2,100,000\",\r\n      beds: 4,\r\n      baths: 3,\r\n      sqft: 2800,\r\n      type: \"mountain\",\r\n      status: \"Coming Soon\",\r\n      image: \"https://images.unsplash.com/photo-1518780664697-55e3ad937233?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80\",\r\n      availableDate: \"June 2023\"\r\n    },\r\n    // ... rest of your upcomingProperties data\r\n  ];\r\n\r\n  // Carousel navigation functions\r\n  const goToSlide = (index) => {\r\n    setCurrentSlide(index);\r\n  };\r\n\r\n  const goToPrev = () => {\r\n    setCurrentSlide((prev) => \r\n      prev === 0 ? Math.ceil(upcomingProperties.length / slidesToShow) - 1 : prev - 1\r\n    );\r\n  };\r\n\r\n  const goToNext = () => {\r\n    setCurrentSlide((prev) => \r\n      prev === Math.ceil(upcomingProperties.length / slidesToShow) - 1 ? 0 : prev + 1\r\n    );\r\n  };\r\n\r\n  // Auto-advance slides\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      goToNext();\r\n    }, 5000);\r\n    return () => clearInterval(interval);\r\n  }, [upcomingProperties.length]);\r\n\r\n  const addToRefs = (el) => {\r\n    if (el && !sectionRefs.current.includes(el)) {\r\n      sectionRefs.current.push(el);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach((entry) => {\r\n          if (entry.isIntersecting) {\r\n            entry.target.classList.add('visible');\r\n          }\r\n        });\r\n      },\r\n      { threshold: 0.1 }\r\n    );\r\n\r\n    sectionRefs.current.forEach((el) => {\r\n      if (el) observer.observe(el);\r\n    });\r\n\r\n    return () => {\r\n      sectionRefs.current.forEach((el) => {\r\n        if (el) observer.unobserve(el);\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"properties-container\">\r\n      {/* Hero Section */}\r\n      <section className=\"properties-hero\">\r\n        <div className=\"hero-overlay\"></div>\r\n        <div className=\"about-hero-content\">\r\n          <h1 className=\"about-hero-title\">Discover Your Dream Property</h1>\r\n          <p className=\"about-hero-subtitle\">Explore our exclusive collection of luxury homes and investment properties</p>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Available Properties Section */}\r\n      <section className=\"property-section\" ref={addToRefs}>\r\n        <h2 className=\"section-title\">Available Properties</h2>\r\n        <div className=\"properties-grid\">\r\n          {availableProperties.map(property => (\r\n            <PropertyCard \r\n              key={property.id} \r\n              property={property} \r\n              ref={addToRefs}\r\n            />\r\n          ))}\r\n        </div>\r\n      </section>\r\n\r\n      {/* Upcoming Properties Section with Carousel\r\n      <section className=\"property-section upcoming-properties\" ref={addToRefs}>\r\n        <div className=\"upcoming-carousel-container\">\r\n          <h2 className=\"section-title\">Coming Soon</h2>\r\n          <p className=\"section-subtitle\">Exciting new properties joining our portfolio</p>\r\n          \r\n          <div className=\"upcoming-carousel\">\r\n            <button className=\"carousel-btn prev\" onClick={goToPrev} aria-label=\"Previous property\">\r\n              &lt;\r\n            </button>\r\n            \r\n            <div \r\n              className=\"carousel-track\" \r\n              style={{ transform: `translateX(-${currentSlide * (100 / slidesToShow)}%)` }}\r\n            >\r\n              {upcomingProperties.map((property) => (\r\n                <div \r\n                  key={property.id}\r\n                  className=\"carousel-slide\"\r\n                >\r\n                  <div className=\"carousel-card\">\r\n                    <div className=\"carousel-image-container\">\r\n                      <img \r\n                        src={property.image} \r\n                        alt={property.title} \r\n                        className=\"carousel-image\"\r\n                        loading=\"lazy\"\r\n                      />\r\n                      <span className=\"upcoming-badge\">\r\n                        Coming Soon\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"carousel-content\">\r\n                      <h3>{property.title}</h3>\r\n                      <p>{property.location}</p>\r\n                      <div className=\"property-details\">\r\n                        <span>{property.beds} beds</span> • \r\n                        <span>{property.baths} baths</span> • \r\n                        <span>{property.sqft} sqft</span>\r\n                      </div>\r\n                      <div className=\"available-date\">\r\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\">\r\n                          <path d=\"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z\"></path>\r\n                        </svg>\r\n                        Available {property.availableDate}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            \r\n            <button className=\"carousel-btn next\" onClick={goToNext} aria-label=\"Next property\">\r\n              &gt;\r\n            </button>\r\n          </div>\r\n          \r\n          <div className=\"carousel-dots\">\r\n            {Array.from({ length: Math.ceil(upcomingProperties.length / slidesToShow) }).map((_, index) => (\r\n              <button\r\n                key={index}\r\n                className={`dot ${index === currentSlide ? 'active' : ''}`}\r\n                onClick={() => goToSlide(index)}\r\n                aria-label={`Go to slide ${index + 1}`}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </section> */}\r\n\r\n      {/* CTA Section */}\r\n      <section className=\"cta-section\" ref={addToRefs}>\r\n        <div className=\"cta-content\">\r\n          <h2>Can't Find What You're Looking For?</h2>\r\n          <p>Our agents can help you find the perfect property that meets all your requirements</p>\r\n          <button className=\"cta-btn\">Contact Our Agents</button>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Properties;"],"names":["React","_ref","ref","property","_jsxs","className","children","_jsx","src","image","alt","title","type","location","price","beds","baths","sqft","Properties","sectionRefs","useRef","currentSlide","setCurrentSlide","useState","upcomingProperties","id","status","availableDate","useEffect","interval","setInterval","prev","Math","ceil","length","clearInterval","addToRefs","el","current","includes","push","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","threshold","observe","unobserve","map","PropertyCard"],"sourceRoot":""}